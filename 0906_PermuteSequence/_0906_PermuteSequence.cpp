// RandomPermute.cpp
// Created 8/23/2018 10:18:47 PM

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <functional>
#include <ctime>

//  Returns a pseudorandom number in the range begin...end - 1
int random(int begin, int end) {
	if (begin >= end)
		return 0;
	else {
		int range = end - begin;
		return begin + rand() % range;
	}
}


// Randomly permute a vector
void permute1(std::vector<int>& a) {
	int n = a.size();
	for (int i = 0; i < n - 1; i++) {
		// Select a pseudorandom location from the current
		// location to the end of the collection
		std::swap(a[i], a[random(i, n)]);
	}
}


// Randomly permute a vector?
void permute2(std::vector<int>& a) {
	int n = a.size();
	for (int i = 0; i < n; i++) {
		// Select a pseudorandom position somewhere in the collection
		std::swap(a[i], a[random(0, n)]);
	}
}


// Counts the number of times each permutation of the vector {1, 2, 3} appears
// when randomly generated by the given permutation function, "perm."  This function
// calls the "perm" function "runs" times.
void count_permutation_frequencies(std::function<void(std::vector<int>&)> perm, 
	                               const std::string& message,
                                   int runs) {
	// permutation_tally counts each permutation as it is generated at random.
	// A C++ map object works like a Python dictionary, storing (key, value) pairs.
	// Here, a vector serves as the key, and the value is the integer count for the
	// the number of times that vector is generated.
	std::map<const std::vector<int>, int> permutation_tally;
	// Zero all the counters
	permutation_tally[{1, 2, 3}] = 0;
	permutation_tally[{1, 3, 2}] = 0;
	permutation_tally[{2, 1, 3}] = 0;
	permutation_tally[{2, 3, 1}] = 0;
	permutation_tally[{3, 1, 2}] = 0;
	permutation_tally[{3, 2, 1}] = 0;

	// original always holds the vector {1,2,3}
	const std::vector<int> original{ 1, 2, 3 };

	// working holds a copy of original is gets permuted and tallied
	std::vector<int> working;


	// Indicate which permutation we're using
	std::cout << message << '\n';

	// Run 1,000,000 times
	for (int i = 0; i < runs; i++) {  
		// Make a copy of the original vector
		working = original;
		// Permute the vector with the provided algorithm
		perm(working);
		// Count this permutation
		permutation_tally[working]++;
	}
	// Report results
	std::cout << "1,2,3: " << permutation_tally[{1, 2, 3}] << '\n';
	std::cout << "1,3,2: " << permutation_tally[{1, 3, 2}] << '\n';
	std::cout << "2,1,3: " << permutation_tally[{2, 1, 3}] << '\n';
	std::cout << "2,3,1: " << permutation_tally[{2, 3, 1}] << '\n';
	std::cout << "3,1,2: " << permutation_tally[{3, 1, 2}] << '\n';
	std::cout << "3,2,1: " << permutation_tally[{3, 2, 1}] << '\n';

}

int main() {
	// Initialize random generator seed
	srand(static_cast<int>(time(0)));
	// Run each permutation one million times
	const int RUNS = 1'000'000;

	count_permutation_frequencies(permute1, "--- Random permute #1 -----", RUNS);
	count_permutation_frequencies(permute2, "--- Random permute #2 -----", RUNS);
}



